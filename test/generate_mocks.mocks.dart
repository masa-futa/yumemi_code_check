// Mocks generated by Mockito 5.4.4 from annotations
// in yumemi_code_check/test/generate_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;
import 'package:shared_preferences/shared_preferences.dart' as _i4;
import 'package:yumemi_code_check/data_source/api_exception.dart' as _i6;
import 'package:yumemi_code_check/data_source/config/search_config.dart'
    as _i13;
import 'package:yumemi_code_check/data_source/config/token_config.dart' as _i15;
import 'package:yumemi_code_check/data_source/local_storage/local_storage_client.dart'
    as _i11;
import 'package:yumemi_code_check/model/model.dart' as _i9;
import 'package:yumemi_code_check/model/search_model.dart' as _i8;
import 'package:yumemi_code_check/query_service/query_service.dart' as _i10;
import 'package:yumemi_code_check/query_service/search_query.dart' as _i5;
import 'package:yumemi_code_check/query_service/search_query_state.dart' as _i3;
import 'package:yumemi_code_check/utils/result.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchQueryState_1 extends _i1.SmartFake
    implements _i3.SearchQueryState {
  _FakeSearchQueryState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferencesAsync_2 extends _i1.SmartFake
    implements _i4.SharedPreferencesAsync {
  _FakeSharedPreferencesAsync_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchQuery].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchQuery extends _i1.Mock implements _i5.SearchQuery {
  @override
  _i2.AutoDisposeNotifierProviderRef<_i3.SearchQueryState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeNotifierProviderRef_0<_i3.SearchQueryState>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeAutoDisposeNotifierProviderRef_0<_i3.SearchQueryState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeNotifierProviderRef<_i3.SearchQueryState>);

  @override
  _i3.SearchQueryState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSearchQueryState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSearchQueryState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.SearchQueryState);

  @override
  set state(_i3.SearchQueryState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.SearchQueryState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeSearchQueryState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeSearchQueryState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.SearchQueryState);

  @override
  void search() => super.noSuchMethod(
        Invocation.method(
          #search,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void exception(
    _i6.ApiException? e,
    StackTrace? s,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #exception,
          [
            e,
            s,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void subscribe(_i7.Result<_i8.SearchModel, _i6.ApiException>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      _i3.SearchQueryState?,
      _i3.SearchQueryState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.SearchQueryState? previous,
    _i3.SearchQueryState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [QueryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryService<T extends _i9.Model> extends _i1.Mock
    implements _i10.QueryService<T> {
  @override
  void subscribe(_i7.Result<T, _i6.ApiException>? result) => super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [result],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalStorageClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageClient extends _i1.Mock
    implements _i11.LocalStorageClient {
  @override
  _i4.SharedPreferencesAsync get preferences => (super.noSuchMethod(
        Invocation.getter(#preferences),
        returnValue: _FakeSharedPreferencesAsync_2(
          this,
          Invocation.getter(#preferences),
        ),
        returnValueForMissingStub: _FakeSharedPreferencesAsync_2(
          this,
          Invocation.getter(#preferences),
        ),
      ) as _i4.SharedPreferencesAsync);

  @override
  _i12.Future<void> setBool({
    required _i11.StoreKey? key,
    required bool? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<bool?> getBool({required _i11.StoreKey? key}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [],
          {#key: key},
        ),
        returnValue: _i12.Future<bool?>.value(),
        returnValueForMissingStub: _i12.Future<bool?>.value(),
      ) as _i12.Future<bool?>);
}

/// A class which mocks [SearchConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchConfig extends _i1.Mock implements _i13.SearchConfig {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
      ) as String);

  @override
  Map<String, String> get accept => (super.noSuchMethod(
        Invocation.getter(#accept),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get jwtAuthorization => (super.noSuchMethod(
        Invocation.getter(#jwtAuthorization),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> defaultAuthorization(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #defaultAuthorization,
          [token],
        ),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
}

/// A class which mocks [TokenConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenConfig extends _i1.Mock implements _i15.TokenConfig {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
      ) as String);

  @override
  Map<String, String> get accept => (super.noSuchMethod(
        Invocation.getter(#accept),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get jwtAuthorization => (super.noSuchMethod(
        Invocation.getter(#jwtAuthorization),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> defaultAuthorization(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #defaultAuthorization,
          [token],
        ),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
}

/// A class which mocks [SearchUrlQuery].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchUrlQuery extends _i1.Mock implements _i13.SearchUrlQuery {
  @override
  Map<String, dynamic> get(
    String? keyword, [
    int? page = 1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keyword,
            page,
          ],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
